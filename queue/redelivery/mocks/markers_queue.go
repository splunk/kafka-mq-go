// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	proto "github.com/splunk/kafka-mq-go/queue/proto"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MarkersQueue is an autogenerated mock type for the MarkersQueue type
type MarkersQueue struct {
	mock.Mock
}

// AddMarker provides a mock function with given fields: offset, timestamp, marker
func (_m *MarkersQueue) AddMarker(offset int64, timestamp time.Time, marker *proto.Marker) {
	_m.Called(offset, timestamp, marker)
}

// MarkersToRedeliver provides a mock function with given fields: now
func (_m *MarkersQueue) MarkersToRedeliver(now time.Time) []*proto.Marker {
	ret := _m.Called(now)

	var r0 []*proto.Marker
	if rf, ok := ret.Get(0).(func(time.Time) []*proto.Marker); ok {
		r0 = rf(now)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*proto.Marker)
		}
	}

	return r0
}

// Partition provides a mock function with given fields:
func (_m *MarkersQueue) Partition() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// SmallestMarkerOffset provides a mock function with given fields:
func (_m *MarkersQueue) SmallestMarkerOffset() (int64, bool) {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
